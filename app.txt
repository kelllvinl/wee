import dotenv from "dotenv";
dotenv.config();

import express from "express";
import expressSession from "express-session";
import multer from "multer";
import path from "path";
import { Client } from "pg";
import http from "http";
import { Server as SocketIO } from "socket.io";

const tables = Object.freeze({
  BLOG: "blog",
});


interface blog {
  id: number;
  subtitle: string;
  blogdate: string;
  content: string;
  image?: string;
  categoryid: number;
}

const app = express();
const server = new http.Server(app);
const io = new SocketIO(server);

app.use(express.json());

export const client = new Client({
  database: process.env.DB_NAME,
  user: process.env.DB_USERNAME,
  password: process.env.DB_PASSWORD,
});

client.connect();

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.resolve("./uploads"));
  },
  filename: function (req, file, cb) {
    cb(null, `${file.fieldname}-${Date.now()}.${file.mimetype.split("/")[1]}`);
  },
});
const upload = multer({ storage });

app.use(
  expressSession({
    secret: "Kelvin",
    resave: true,
    saveUninitialized: true,
  })
);

app.use((req, res, next) => {
  const cur = new Date().toISOString();
  console.log(`[INFO] ${cur} req path: ${req.path} method: ${req.method}`);
  next();
});

io.on("connection", (socket) => {
  // ...
  console.log(`[INFO] socket: ${socket.id} is connected`);
});

// method: GET, path: /blog
app.get("/blog", async (req, res) => {
  const queryResult = await client.query<blog>(/*sql*/ `SELECT * FROM ${tables.BLOG} ORDER BY blog_id DESC`);
  const blog = queryResult.rows;
  res.json({ data: blog });
});

// with file upload
app.post("/blog", upload.single("image"), async (req, res) => {
  console.log(req.body);

  const subtitle = req.body.subtitle;

  const content = req.body.content;
  const filename = req.file?.filename;
  const categoryId = req.body.categoryId;
  await client.query(/*sql*/ `INSERT INTO ${tables.BLOG} (subtitle, content, blog_img, post_date, category_id) VALUES ($1, $2, $3, NOW(), $4)`, [subtitle, content, filename, categoryId]);
  io.emit("new-blog");
  res.json({ message: "success" });
});


app.delete("/blog/:mid", async (req, res) => {
  const blogID = parseInt(req.params.mid);
  if (isNaN(blogID)) {
    res.status(400).json({ message: "Invalid blog ID" });
    return;
  }
  await client.query(/*sql*/ `DELETE FROM ${tables.BLOG} WHERE id = $1`, [blogID]);
  res.json({ message: "success" });
});



app.use(express.static(path.join(__dirname, "public")));
app.use("/images", express.static(path.join(__dirname, "uploads")));


app.use((req, res, next) => {
  res.sendFile(path.join(__dirname, "public", "404.html"));
});

const PORT = 8080;
server.listen(PORT, () => {
  console.log(`[INFO] listening to port ${PORT}`);
});
